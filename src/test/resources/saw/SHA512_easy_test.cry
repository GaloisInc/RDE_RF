module SHA512_easy_test where

import SHA512_easy
import SHA512_decomposed

import `SHA_spec as Spec

K : [80][64]
K =
  [0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f, 0xe9b5dba58189dbbc,
   0x3956c25bf348b538, 0x59f111f1b605d019, 0x923f82a4af194f9b, 0xab1c5ed5da6d8118,
   0xd807aa98a3030242, 0x12835b0145706fbe, 0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2,
   0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235, 0xc19bf174cf692694,
   0xe49b69c19ef14ad2, 0xefbe4786384f25e3, 0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65,
   0x2de92c6f592b0275, 0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5,
   0x983e5152ee66dfab, 0xa831c66d2db43210, 0xb00327c898fb213f, 0xbf597fc7beef0ee4,
   0xc6e00bf33da88fc2, 0xd5a79147930aa725, 0x06ca6351e003826f, 0x142929670a0e6e70,
   0x27b70a8546d22ffc, 0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed, 0x53380d139d95b3df,
   0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6, 0x92722c851482353b,
   0xa2bfe8a14cf10364, 0xa81a664bbc423001, 0xc24b8b70d0f89791, 0xc76c51a30654be30,
   0xd192e819d6ef5218, 0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8,
   0x19a4c116b8d2d0c8, 0x1e376c085141ab53, 0x2748774cdf8eeb99, 0x34b0bcb5e19b48a8,
   0x391c0cb3c5c95a63, 0x4ed8aa4ae3418acb, 0x5b9cca4f7763e373, 0x682e6ff3d6b2b8a3,
   0x748f82ee5defb2fc, 0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec,
   0x90befffa23631e28, 0xa4506cebde82bde9, 0xbef9a3f7b2c67915, 0xc67178f2e372532b,
   0xca273eceea26619c, 0xd186b8c721c0c207, 0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178,
   0x06f067aa72176fba, 0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
   0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc, 0x431d67c49c100d4c,
   0x4cc5d4becb3e42b6, 0x597f299cfc657e2a, 0x5fcb6fab3ad6faec, 0x6c44198c4a475817]

//sha384 : {msgLen} (fin msgLen, 128 >= width msgLen)
//  => [msgLen] -> [384]
//sha384 (m:[msgLen]) = take`{384} (join hf)
//  where
//    m' : [max 1024 ((msgLen /^ 1024) * 1024)]
//    m' = m # 0
//
//    bs : [max 1 (msgLen /^ 1024) - 1][16][64]
//    bs # [bf] = split (split m')
//
//    p1, p2 : [16][64]
//    p1_ # p2_ # [p2needed] = padLastBlock `msgLen bf
//    p1 = split p1_
//    p2 = split p2_
//
//    h_prev, h_next : [max 1 (msgLen /^ 1024)]State
//    h_prev # [hp] = [h384] # h_next
//    h_next = [ ProcessBlock h b | h <- h_prev | b <- bs # [p1] ]
//
//    hf : State
//    hf = if p2needed then ProcessBlock hp p2 else hp
//
//sha384_decomposed : {msgLen} (fin msgLen, 128 >= width msgLen)
//  => [msgLen] -> [384]
//sha384_decomposed m = take (join hf)
//  where
//    m' : [max 1024 ((msgLen /^ 1024) * 1024)]
//    m' = m # 0
//
//    bs : [max 1 (msgLen /^ 1024) - 1][16][64]
//    bs # [bf] = split (split m')
//
//    p1, p2 : [16][64]
//    p1_ # p2_ # [p2needed] = padLastBlock `msgLen bf
//    p1 = split p1_
//    p2 = split p2_
//
//    h_prev, h_next : [max 1 (msgLen /^ 1024)]State
//    h_prev # [hp] = [h384] # h_next
//    h_next = [ ProcessBlock_decomposed h b | h <- h_prev | b <- bs # [p1] ]
//
//    hf : State
//    hf = if p2needed then ProcessBlock_decomposed hp p2 else hp

sha384 : {msgLen} (fin msgLen, 128 >= width msgLen)
  => [msgLen] -> [384]
sha384 m = take (join hf)
  where
    h_next, h_prev : [num_blocks msgLen]State
    h_prev # [hf] = [h384] # h_next
    h_next = [ ProcessBlock h b | h <- h_prev | b <- pad_easy m ]

sha384_decomposed : {msgLen} (fin msgLen, 128 >= width msgLen)
  => [msgLen] -> [384]
sha384_decomposed m = take (join hf)
  where
    h_next, h_prev : [num_blocks msgLen]State
    h_prev # [hf] = [h384] # h_next
    h_next = [ ProcessBlock_decomposed h b | h <- h_prev | b <- pad_easy m ]

sha384_ref m = take`{384} (sha m)
  where
    sha = Spec::sha
      { SIGMA_0 = Sigma0
      , SIGMA_1 = Sigma1
      , sigma_0 = sigma0
      , sigma_1 = sigma1
      , K = K
      , H0 = h384
      }

ProcessBlock_Common : State -> [16][64] -> State
ProcessBlock_Common = Spec::processBlock_Common
  { SIGMA_0 = Sigma0
  , SIGMA_1 = Sigma1
  , sigma_0 = sigma0
  , sigma_1 = sigma1
  , K = K
  , H0 = h384
  }

compress_Common : State -> [80][64] -> State
compress_Common = Spec::compress_Common
  { SIGMA_0 = Sigma0
  , SIGMA_1 = Sigma1
  , sigma_0 = sigma0
  , sigma_1 = sigma1
  , K = K
  , H0 = h384
  }

type block_size    = 1024
type num_blocks L  = (L+1+2*64) /^ block_size
type padded_size L = num_blocks L * block_size

pad_easy : {L} (128 >= width L) => [L] -> [num_blocks L][16][64]
pad_easy m = take (bs # [p1] # [p2])
  where
    m' : [max 1024 ((L /^ 1024) * 1024)]
    m' = m # 0

    bs : [max 1 (L /^ 1024) - 1][16][64]
    bs # [bf] = split (split m')

    p1, p2 : [16][64]
    p1_ # p2_ # [p2needed] = padLastBlock `L bf
    p1 = split p1_
    p2 = split p2_

pad_ref : {L} (128 >= width L) => [L] -> [num_blocks L][16][64]
pad_ref m = [split b | b <- parse_ (pad_ m)]
  where
    pad_ = Spec::pad
      { SIGMA_0 = Sigma0
      , SIGMA_1 = Sigma1
      , sigma_0 = sigma0
      , sigma_1 = sigma1
      , K = K
      , H0 = h384
      }
    parse_ = Spec::parse
      { SIGMA_0 = Sigma0
      , SIGMA_1 = Sigma1
      , sigma_0 = sigma0
      , sigma_1 = sigma1
      , K = K
      , H0 = h384
      }

messageSchedule_Common : [16][64] -> [80][64]
messageSchedule_Common = Spec::messageSchedule_Common
  { SIGMA_0 = Sigma0
  , SIGMA_1 = Sigma1
  , sigma_0 = sigma0
  , sigma_1 = sigma1
  , K = K
  , H0 = h384
  }

property sha384_equiv_0 = sha384 [] == sha384_ref []
property sha384_decomposed_equiv_0 = sha384_decomposed [] == sha384_ref []
